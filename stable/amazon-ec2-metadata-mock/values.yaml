# Default values to be passed into the chart's templates.

image:
  repository: "public.ecr.aws/aws-ec2/amazon-ec2-metadata-mock"
  tag: "v1.11.2"
  pullPolicy: "IfNotPresent"

# replicaCount defines the number of pods to replicate
replicaCount: 1

# nameOverride overrides the name of the helm chart
nameOverride: ""
# fullnameOverride overrides the name of the application
fullnameOverride: ""

# targetNodeOs creates node-OS specific deployments (e.g. "linux", "windows", "linux windows")
targetNodeOs: "linux"

resources:
  requests:
    memory: "64Mi"
    cpu: "50m"
  limits:
    memory: "128Mi"
    cpu: "100m"

# nodeSelector tells both linux and windows deployments where to place the amazon-ec2-metadata-mock pods
# By default, this value is empty and every node will receive a pod.
nodeSelector: {}
# linuxNodeSelector tells the linux deployments where to place the amazon-ec2-metadata-mock pods
# pods. By default, this value is empty and every linux node will receive a pod.
linuxNodeSelector: {}
# windowsNodeSelector tells the windows deployments where to place the amazon-ec2-metadata-mock pods
# pods. By default, this value is empty and every windows node will receive a pod.
windowsNodeSelector: {}

nodeSelectorTermsOs: ""
nodeSelectorTermsArch: ""

# podAnnotations define annotations to add to each pod
podAnnotations: {}
linuxAnnotations: {}
windowsAnnotations: {}

# tolerations specify taints that a pod tolerates so that it can be scheduled to a node with that taint
tolerations: []
linuxTolerations: []
windowsTolerations: []

# arguments represent CLI args to use when starting amazon-ec2-metadata-mock
arguments: []
linuxArguments: []
windowsArguments: []

# updateStrategy represents the update strategy for a Deployment
updateStrategy: "RollingUpdate"
linuxUpdateStrategy: ""
windowsUpdateStrategy: ""

rbac:
  # rbac.pspEnabled, if `true` a restricted pod security policy is created and used
  pspEnabled: false

serviceAccount:
  # create represents whether a service account should be created
  create: true
  # name is the name of the service account to use. If name is not set and create is true,
  # a name is generated using fullname template
  name: "amazon-ec2-metadata-mock-service-account"
  annotations: {}

securityContext:
  runAsUserID: "1000"
  runAsGroupID: "1000"

# configMap represents the name of an EXISTING configMap to use
# configMap can be used to pass a config file with the complete set of AEMM configuration overrides, not just limited to AEMM CLI flags. Learn more in README.
configMap: ""

# configMapFileName represents the name of the file used to create the configMap. Learn more in README.
# supported file extenstions - https://github.com/spf13/viper/blob/master/viper.go#L328
configMapFileName: "aemm-config.json"

# servicePort represents the port to run the AEMM K8s service on. This can be any port of user's choice.
# note: this port is different from the native AEMM config - aemm.server.port which is not supported when AEMM is run as a K8s service. Learn more in README.
servicePort: "1338"

serviceName: "amazon-ec2-metadata-mock-service"

# aemm represents all the CLI flag configuration for Amazon EC2 Metadata Mock (AEMM)
# Null / empty values here means that AEMM will run with defaults configured in the tool
# Refer to the readme for descriptions and defaults - https://github.com/aws/amazon-ec2-metadata-mock/blob/main/helm/amazon-ec2-metadata-mock/README.md
aemm:
  server:
    hostname: ""
  mockDelaySec: 0
  mockTriggerTime: ""
  mockIPCount: 2
  imdsv2: false
  rebalanceDelaySec: 0
  rebalanceTriggerTime: ""
  spot:
    action: ""
    time: ""
    rebalanceRecTime: ""
  events:
    code: ""
    notAfter: ""
    notBefore: ""
    notBeforeDeadline: ""
    state: ""

# test configuration
test:
  image: "centos"
  imageTag: "latest"
  pullPolicy: "IfNotPresent"
