version: 2.1
jobs:
  build-test-push:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl
      - run:
          name: Install kubeval
          command: |
            mkdir -p $HOME/tools && \
            cd $HOME/tools && \
            curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz && sudo mv kubeval /bin/kubeval
      - run:
          name: Install helm
          command: curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.16.9-linux-amd64.tar.gz | tar xz && sudo mv linux-amd64/helm /bin/helm && sudo rm -rf linux-amd64
      - run:
          name: Initialize helm
          command:  helm init --client-only --kubeconfig=$HOME/.kube/kubeconfig
      - run:
          name: Install helmv3
          command: curl -sSL https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz | tar xz && sudo mv linux-amd64/helm /bin/helmv3 && sudo rm -rf linux-amd64
      - run:
          name: Lint stable charts with Helm v2
          command: |
            helm lint ./stable/*
      - run:
          name: Lint stable charts with Helm v3
          command: |
            helmv3 lint ./stable/*
      - run:
          name: Validate stable charts with Helm v2
          command: |
            STABLE="$(git rev-parse --show-toplevel)/stable"
            cd ${STABLE}
            for d in */; do
              EXTRA_ARGS=""
              if [ -f ${STABLE}/${d}/ci/extra_args ]; then
                EXTRA_ARGS=$(cat ${STABLE}/${d}/ci/extra_args)
              fi
              echo "Validating chart ${d}"
              helm template ${STABLE}/${d} ${EXTRA_ARGS} | kubeval --strict --ignore-missing-schemas
            done
      - run:
          name: Validate stable charts with Helm v3
          command: |
            STABLE="$(git rev-parse --show-toplevel)/stable"
            cd ${STABLE}
            for d in */; do
              EXTRA_ARGS=""
              if [ -f ${STABLE}/${d}/ci/extra_args ]; then
                EXTRA_ARGS=$(cat ${STABLE}/${d}/ci/extra_args)
              fi
              echo "Validating chart ${d}"
              helmv3 template ${STABLE}/${d} ${EXTRA_ARGS}| kubeval --strict --ignore-missing-schemas
            done
      - run:
          name: Validate stable charts versions
          command: |
            EXIT_CODE=0
            if $(git describe HEAD --tags | grep -Eq "^v[0-9]+(\.[0-9]+)*(-[a-z0-9]+)?$"); then
              LAST_RELEASE_HASH=$(git rev-list --tags --max-count=1 --skip=1 --no-walk)
            else 
              TAG=$(git describe HEAD --tags | grep -Eo "^v[0-9]+(\.[0-9]+)*")
              LAST_RELEASE_HASH=$(git rev-list -1 $TAG)
            fi
            LAST_RELEASE_TAG=$(git describe $LAST_RELEASE_HASH --tags)
            STABLE="$(git rev-parse --show-toplevel)/stable"
            cd ${STABLE}
            echo "üìù Checking for updated Chart versions since the last eks-charts release $LAST_RELEASE_TAG"
            for d in */; do
              LAST_COMMIT_HASH=$(git --no-pager log --pretty=tformat:"%H" -- $d | awk 'FNR <= 1')
              ## If LAST_RELEASE_HASH does not include the chart, then it's a new chart and does not need a version increment
              if [[ -z $(git ls-tree -d $LAST_RELEASE_HASH $d) ]]; then
                echo "‚úÖ Chart $d is a new chart since the last release"
                continue
              fi
              ## If LAST_RELEASE_HASH is NOT an ancestor of LAST_COMMIT_HASH then it has not been modified 
              if [[ ! -z $LAST_COMMIT_HASH && -z $(git rev-list $LAST_COMMIT_HASH | grep $LAST_RELEASE_HASH) || $LAST_COMMIT_HASH == $LAST_RELEASE_HASH ]]; then
                echo "‚úÖ Chart $d had no changes since the last eks-charts release"
                continue
              fi
              LAST_RELEASE_CHART_VERSION=$(git --no-pager show $LAST_RELEASE_HASH:stable/"$d"Chart.yaml | grep 'version:' | xargs | cut -d' ' -f2 | tr -d '[:space:]')
              LAST_COMMIT_CHART_VERSION=$(git --no-pager show $LAST_COMMIT_HASH:stable/"$d"Chart.yaml | grep 'version:' | xargs | cut -d' ' -f2 | tr -d '[:space:]')
              if [[ $LAST_RELEASE_CHART_VERSION == $LAST_COMMIT_CHART_VERSION ]]; then
                echo "‚ùå Chart $d has the same Chart version as the last release $LAST_COMMIT_CHART_VERSION"
                EXIT_CODE=1
              else 
                echo "‚úÖ Chart $d has a different version since the last eks-charts release ($LAST_RELEASE_CHART_VERSION -> $LAST_COMMIT_CHART_VERSION)"
              fi
            done
            exit $EXIT_CODE

      - run:
          name: Package stable charts
          command: |
            mkdir $HOME/stable
            helm package ./stable/* --destination $HOME/stable
      - run:
          name: Publish stable charts
          command: |
            if echo "${CIRCLE_TAG}" | grep -Eq "^v[0-9]+(\.[0-9]+)*(-[a-z0-9]+)?$"; then
              REPOSITORY="https://eks-bot:${GITHUB_TOKEN}@github.com/aws/eks-charts.git"
              git config user.email eks-bot@users.noreply.github.com
              git config user.name eks-bot
              git remote set-url origin ${REPOSITORY}
              git checkout gh-pages
              mv -f $HOME/stable/*.tgz .
              helm repo index . --url https://aws.github.io/eks-charts
              git add .
              git commit -m "Publish stable charts ${CIRCLE_TAG}"
              git push origin gh-pages
              echo "Publish charts"
            else
              echo "Not a release! Skip charts publish"
            fi

  e2e-helmv2:
    machine: true
    steps:
      - checkout
      - run:
          name: Install Kubernetes Kind and Helm v2
          command: HELM_MODE=v2 test/lib/kind.sh
      - run:
          name: Install BATS
          command: test/lib/bats.sh
      - run:
          name: Run App Mesh tests
          command: test/run.sh

  e2e-helmv3:
    machine: true
    steps:
      - checkout
      - run:
          name: Install Kubernetes Kind and Helm v3
          command: HELM_MODE=v3 test/lib/kind.sh
      - run:
          name: Install BATS
          command: test/lib/bats.sh
      - run:
          name: Run App Mesh tests
          command: test/run.sh

workflows:
  version: 2
  stable:
    jobs:
      - build-test-push:
          filters:
            branches:
              ignore:
                - gh-pages
            tags:
              ignore: /^test.*/
      -  e2e-helmv2:
          requires:
            - build-test-push
          filters:
            branches:
              ignore:
                - gh-pages
      -  e2e-helmv3:
           requires:
             - build-test-push
           filters:
             branches:
               ignore:
                 - gh-pages
